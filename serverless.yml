service: ${opt:env}-test-serverless
frameworkVersion: '2'

custom:
  names:
    dynamodb: "stockTable"
    kinesis: "stockKinesis"

provider:
  name: aws
  runtime: python3.8

functions:
  check_stock_value:
    name: ${opt:env}-check_stock_value
    handler: handler.check_stock_value
    role: CheckStockRole
    environment:
      DYNAMODB_NAME: ${opt:env}-${self:custom.names.dynamodb}
  sell:
    name: ${opt:env}-sell
    handler: handler.sell
  buy:
    name: ${opt:env}-buy
    handler: handler.buy

stepFunctions:
  stateMachines:
    shop-workflow:
      events:
        - http:
            path: shop
            method: post
        - kinesis:
            arn:
            Fn::GetAtt: [KinesisStream, Arn]
      definition:
        Comment: "A sample application"
        StartAt: check_stock_value
        States:
          check_stock_value:
            Type: Task
            Resource:
              Fn::GetAtt: [check_stock_value, Arn]
            Next: buy_or_sell
          buy_or_sell:
            Type: Choice
            Choices:
              - Variable: "$.stock_price"
                NumericLessThanEquals: 50
                Next: sell
            Default: buy
          sell:
            Type: Task
            Resource:
              Fn::GetAtt: [sell, Arn]
            End: true
          buy:
            Type: Task
            Resource:
              Fn::GetAtt: [buy, Arn]
            End: true

resources:
  Resources:
    stockTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${opt:env}-${self:custom.names.dynamodb}
        AttributeDefinitions:
          - AttributeName: name
            AttributeType: S
          - AttributeName: datetime
            AttributeType: S
        KeySchema:
          - AttributeName: name
            KeyType: HASH
          - AttributeName: datetime
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    CheckStockRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: ${opt:env}-CheckStockRole
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: ${opt:env}-CheckStockPolicy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource:
                    - 'Fn::Join':
                        - ':'
                        - - 'arn:aws:logs'
                          - Ref: 'AWS::Region'
                          - Ref: 'AWS::AccountId'
                          - 'log-group:/aws/lambda/*:*:*'
                - Effect: Allow
                  Action:
                    - dynamodb:PutItem
                  Resource:
                    Fn::GetAtt: [stockTable, Arn]
    KinesisStream:
      Type: AWS::Kinesis::Stream
      Properties:
        Name: ${opt:env}-${self:custom.names.kinesis}
        ShardCount: 1


plugins:
  - serverless-step-functions
